"use strict";var Global={Blazy:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){new Blazy({breakpoints:[{width:0,src:"data-src-small"},{width:640,src:"data-src-medium"},{width:1024,src:"data-src-large"},{width:1200,src:"data-src-xlarge"},{width:1440,src:"data-src-xxlarge"}]})}),Barba:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){var t=Barba.BaseTransition.extend({start:function(){Promise.all([this.newContainerLoading,this.fadeOut()]).then(this.fadeIn.bind(this))},fadeOut:function(){return new Promise(function(t,e){document.querySelector(".barba-bg").className+=" barba-bg--visible",window.setTimeout(function(){t()},500)})},fadeIn:function(){this.oldContainer.style.display="none",document.querySelector(".barba-bg").classList.remove("barba-bg--visible"),this.done()}});Barba.Pjax.getTransition=function(){return t}}),Init:function(){Global.Blazy(),Global.Barba()}};document.addEventListener("DOMContentLoaded",function(){Global.Init(),Barba.Pjax.start()}),Barba.Dispatcher.on("transitionCompleted",function(){Global.Init()});var API={products:{}};API.products.fetchProductsFromDatabase=function(t){return new Promise(function(t,e){t("it worked")})};var store=new Vuex.Store({state:{modalVisible:!1,isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)},actions:{fetchProductsFromDatabase:function(t,e){t.commit;return new Promise(function(e,n){API.products.fetchProductsFromDatabase().then(function(t){e(t)}).catch(function(t){n(t)})})},toggleModalVisibility:function(t,e){(0,t.commit)("toggleModalVisibility",e)}},getters:{modalVisible:function(){return store.state.modalVisible}},mutations:{toggleModalVisibility:function(t,e){store.state.modalVisible=e}}});Barba.Dispatcher.on("transitionCompleted",function(){if(document.getElementById("datepicker"))new Vue({el:"#datepicker",store:store,data:function(){return{}},computed:{},watch:{},mounted:function(){this.initiateDatepicker()},methods:{initiateDatepicker:function(){new Pikaday({field:document.querySelector(".datepicker"),format:"D MMM YYYY",i18n:{previousMonth:"Vorige maand",nextMonth:"Volgende maand",months:["Januari","Februari","Maart","April","Mei","Juni","Juli","Augustus","September","Oktober","November","December"],weekdays:["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],weekdaysShort:["Zo","Ma","Di","Woe","Do","Vr","Za"]},firstDay:1})}},created:function(){},destroyed:function(){}})}),Barba.Dispatcher.on("transitionCompleted",function(){if(document.getElementById("modal"))new Vue({el:"#modal",store:store,data:function(){return{}},computed:{modalVisible:{get:function(){return this.$store.getters.modalVisible},set:function(t){this.$store.dispatch("toggleModalVisibility",t)}}},mounted:function(){},methods:{},created:function(){},destroyed:function(){}})}),Barba.Dispatcher.on("transitionCompleted",function(){if(document.getElementById("section-form"))new Vue({el:"#section-form",store:store,computed:{modalVisible:{get:function(){return this.$store.getters.modalVisible},set:function(t){this.$store.dispatch("toggleModalVisibility",t)}}},watch:{},mounted:function(){},methods:{},created:function(){},destroyed:function(){}})}),Barba.Dispatcher.on("transitionCompleted",function(){if(document.getElementById("videoBG"))new Vue({el:"#videoBG",store:store,data:function(){return{}},computed:{},mounted:function(){this.initiateBGVideo()},methods:{initiateBGVideo:function(){videojs("#video-element",{autoplay:!this.$store.state.isMobile,muted:!0,controls:!0})}},created:function(){},destroyed:function(){}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
